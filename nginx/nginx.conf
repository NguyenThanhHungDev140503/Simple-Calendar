events {
    worker_connections auto; # Tự động thiết lập số lượng kết nối tối đa cho mỗi worker process
}

http {
    # Bao gồm file mime.types để ánh xạ phần mở rộng tệp với loại MIME tương ứng
    include       /etc/nginx/mime.types;
    # Thiết lập loại MIME mặc định cho các tệp không được ánh xạ bởi mime.types
    default_type  application/octet-stream;

    # Định nghĩa định dạng log chính cho access log
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Chỉ định đường dẫn và định dạng cho access log
    access_log  /var/log/nginx/access.log  main;
    # Chỉ định đường dẫn cho error log
    error_log   /var/log/nginx/error.log;

    # Kích hoạt sendfile để truyền tệp trực tiếp từ kernel đến socket mà không cần sao chép vào không gian người dùng
    sendfile        on;
    # Kích hoạt tcp_nopush để gửi header TCP trong một gói tin khi sendfile được sử dụng
    tcp_nopush      on;
    # Kích hoạt tcp_nodelay để vô hiệu hóa thuật toán Nagle, gửi dữ liệu ngay lập tức
    tcp_nodelay     on;
    # Thiết lập thời gian chờ giữ kết nối (keep-alive) là 65 giây
    keepalive_timeout  65;
    # Thiết lập kích thước tối đa cho bảng băm của các loại MIME
    types_hash_max_size 2048;

    # Bật nén Gzip để giảm kích thước dữ liệu gửi đến client
    gzip on;
    # Thêm header Vary: Accept-Encoding để cache proxy hoạt động đúng
    gzip_vary on;
    # Chỉ nén các phản hồi có độ dài tối thiểu là 1024 byte
    gzip_min_length 1024;
    # Áp dụng nén cho tất cả các proxy
    gzip_proxied any;
    # Mức độ nén Gzip (1-9), 6 là mức cân bằng giữa tốc độ và tỷ lệ nén
    gzip_comp_level 6;
    # Các loại MIME sẽ được nén
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    #==================================================================================================
    # SERVER BLOCK - HTTP (Chuyển hướng sang HTTPS)
    #==================================================================================================
    
    server {
        # Lắng nghe cổng 80 cho các yêu cầu HTTP
        listen       80;
        # Tên miền hoặc địa chỉ IP mà máy chủ này phục vụ
        server_name  mywebsite;
        
        # Chuyển hướng tất cả các yêu cầu HTTP sang HTTPS
        return 301 https://$server_name$request_uri;
    }

    #==================================================================================================
    # SERVER BLOCK - HTTPS (Cấu hình tối ưu cho production)
    #==================================================================================================
    
    server {
        # Lắng nghe cổng 443 cho các yêu cầu HTTPS
        listen 443 ssl http2;
        server_name mywebsite;

        # Cấu hình SSL
        ssl_certificate /etc/ssl/certs/nginx.crt;
        ssl_certificate_key /etc/ssl/private/nginx.key;
        
        # Cấu hình SSL tối ưu cho production
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Cấu hình session cache và timeout
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Cấu hình stapling OCSP
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Các header bảo mật khác
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Thư mục gốc chứa các tệp web
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Vị trí chính, xử lý tất cả các yêu cầu đến thư mục gốc
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Vị trí cho các tệp tĩnh như CSS, JS, hình ảnh với caching tối ưu
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }

        # Trang lỗi tùy chỉnh cho các mã lỗi 500, 502, 503, 504
        # Chỉ định trang lỗi tùy chỉnh cho từng mã lỗi cụ thể
        error_page 500 /500.html;
        error_page 502 /502.html;
        error_page 503 /503.html;
        error_page 504 /504.html;

        # Định nghĩa vị trí cụ thể cho từng trang lỗi
        location = /500.html {
            # Thư mục gốc chứa trang lỗi
            root /usr/share/nginx/html;
        }

        location = /502.html {
            # Thư mục gốc chứa trang lỗi
            root /usr/share/nginx/html;
        }

        location = /503.html {
            # Thư mục gốc chứa trang lỗi
            root /usr/share/nginx/html;
        }

        location = /504.html {
            # Thư mục gốc chứa trang lỗi
            root /usr/share/nginx/html;
        }
    }
}